.final-score {
    position: absolute;
    left: 50%;
    transform: translateX(-50%); /* To center Must Remeber this */
    top: 520px;
    color: #555;
    font-size: 18px;
    font-family: 'Lato';
    text-align: center;
    padding: 10px;
    width: 160px;
    text-transform: uppercase;
}

.final-score:focus { outline: none; }


#dice-1 { top: 120px; }

#dice-2 { top: 250px; }

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.clearfix::after {
    content: "";
    display: table;
    clear: both;
}

body {
    background-image: linear-gradient(rgba(62, 20, 20, 0.4), rgba(62, 20, 20, 0.4)), url(back.jpg);
    background-size: cover;
    background-position: center;
    font-family: Lato;
    font-weight: 300;
    position: relative;
    height: 100vh;
    color: #555;
}

.wrapper {
    width: 1000px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #fff;
    box-shadow: 0px 10px 50px rgba(0, 0, 0, 0.3);
    overflow: hidden;
}

.player-0-panel,
.player-1-panel {
    width: 50%;
    float: left;
    height: 600px;
    padding: 100px;
}

.player-name {
    font-size: 40px;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: 100;
    margin-top: 20px;
    margin-bottom: 10px;
    position: relative;
}

.player-score {
    text-align: center;
    font-size: 80px;
    font-weight: 100;
    color: #EB4D4D;
    margin-bottom: 130px;
}

.active {background-color: #f7f7f7;}
.active .player-name {font-weight: 300;}

.active .player-name::after {
    content: "\2022";
    font-size: 47px;
    position: absolute;
    color: #EB4D4D;
    top: -7px;
    right: 10px;
}

.player-current-box {
    background-color: #EB4D4D;
    color: #fff;
    width: 40%;
    margin: 0 auto;
    padding: 12px;
    text-align: center;
}

.player-current-label {
    text-transform: uppercase;
    margin-bottom: 10px;
    font-size: 12px;
    color: #222;
}

.player-current-score {
    font-size: 30px;
}

button {
    position: absolute;
    width: 200px;
    left: 50%;
    transform: translateX(-50%);
    color: #555;
    background: none;
    border: none;
    font-family: Lato;
    font-size: 20px;
    text-transform: uppercase;
    cursor: pointer;
    font-weight: 300;
    transition: background-color 0.3s, color 0.3s;
}

button:hover { font-weight: 600; color: #F9690E; }
button:hover i { margin-right: 20px; }

button:focus {
    outline: none;
}

i { 
    color: #EB4D4D;
    display: inline-block;
    margin-right: 15px;
    font-size: 32px;
    line-height: 1;
    vertical-align: text-top;
    margin-top: -4px;
    transition: margin 0.3s;
}

.btn-new { top: 45px; }
.btn-roll { top: 403px; }
.btn-hold { top: 467px; }

.dice {
    position: absolute;
    left: 50%;
    top: 178px;
    transform: translateX(-50%);
    height: 100px;
    box-shadow: 0px 10px 60px rgba(0, 0, 0, 0.10);
}

.winner {
    background-color: #f7f7f7;
}

.winner .player-name {
    font-weight: 300;
    color: #EB4D4D;
}

import React from "react";
import {
  ExpandableForm,
  SectionHeader
} from "mcp-library-shared-react-components";
import { Layout } from "../../../Layout";
import { useNavigate } from "react-router-dom";
import {
  createPartiesRequest,
  PersonDetails,
  disableAndEnableNextAndBackButtons
} from "../../../../util";
import { AddVehiclesInnerForm } from "./add-vehicles-inner-form.component";
import {
  saveVehicle,
  VehicleDetails,
  VehicleDriverType,
  VehicleOwnerType,
  useAppDispatch,
  useAppSelector
} from "../../../../redux";

export const AddVehicles: React.FC = () => {
  const dispatch = useAppDispatch();
  const { insuredVehicle, vehicleList } = useAppSelector(
    (state) => state.vehicleDetails
  );
  const parties = useAppSelector((state) => state.parties.allParties);

  const navigate = useNavigate();
  sessionStorage.removeItem("vehicleLevel");

  const handleSaveClick = async (
    vehicleDetails: VehicleDetails,
    shouldNavigate: boolean,
    personDetails: PersonDetails
  ) => {
    let vehicleOwnerId = vehicleDetails.vehicleOwnerId;
    let vehicleDriverId = vehicleDetails.vehicleDriverId;
    let notListedDriverId = vehicleDetails.notListedDriverId;
    let notListedOwnerId = vehicleDetails.notListedOwnerId;
    let primaryOwnerType = vehicleDetails.primaryOwnerType;
    let primaryDriverType = vehicleDetails.primaryDriverType;
    let secondaryOwnerType = vehicleDetails.secondaryOwnerType;
    let secondaryDriverType = vehicleDetails.secondaryDriverType;

    const partiesRequest = createPartiesRequest(
      vehicleDetails,
      personDetails,
      parties
    );

    if (partiesRequest.vehicleOwnerId) {
      vehicleOwnerId = partiesRequest.vehicleOwnerId;
    }
    if (partiesRequest.vehicleDriverId) {
      vehicleDriverId = partiesRequest.vehicleDriverId;
    }

    if (
      !notListedDriverId &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.Listed
    ) {
      notListedDriverId = vehicleDriverId;
    }
    if (
      !notListedOwnerId &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Listed
    ) {
      notListedOwnerId = vehicleOwnerId;
    }

    // To display correct party as the selected person, when editing this entry in future flow
    if (
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Company &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Listed &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.SomeoneNotListed
    ) {
      primaryOwnerType = VehicleOwnerType.Listed;
    }

    if (
      vehicleDetails.primaryDriverType !== VehicleDriverType.NoOne &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.Listed &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.SomeoneNotListed
    ) {
      primaryDriverType = VehicleDriverType.Listed;
    }

    if (
      vehicleDetails.secondaryOwnerType !== VehicleOwnerType.Listed &&
      vehicleDetails.secondaryOwnerType !== VehicleOwnerType.SomeoneNotListed
    ) {
      secondaryOwnerType = VehicleOwnerType.Listed;
    }

    if (
      vehicleDetails.secondaryDriverType !== VehicleDriverType.Listed &&
      vehicleDetails.secondaryDriverType !== VehicleDriverType.SomeoneNotListed
    ) {
      secondaryDriverType = VehicleDriverType.Listed;
    }

    const vehicleRequestBody = {
      vehiclesToAdd: [
        {
          ...vehicleDetails,
          vehicleOwnerId,
          vehicleDriverId,
          notListedDriverId,
          notListedOwnerId,
          primaryDriverType,
          primaryOwnerType,
          secondaryOwnerType,
          secondaryDriverType
        }
      ]
    };

    dispatch(
      saveVehicle(
        vehicleRequestBody,
        false,
        null,
        null,
        navigate,
        null,
        {
          partiesToAdd: partiesRequest.partiesToAdd
        },
        shouldNavigate
      )
    );
  };

  const listItems = [insuredVehicle, ...vehicleList];

  const onClickOfAddButton = () => {
    disableAndEnableNextAndBackButtons(true);
  };

  const onClickOfEditButton = () => {
    disableAndEnableNextAndBackButtons(true);
  };

  const enableNextAndBackButtons = () => {
    disableAndEnableNextAndBackButtons(false);
  };

  return (
    <Layout
      nextText="Next"
      backText="Back"
      handleNextClick={() => {
        navigate("../add-damaged-property");
      }}
      handleBackClick={() => navigate(-1)}
    >
      <SectionHeader
        headerText="Add vehicles that were involved in the incident."
        sectionModifier="claim"
      />
      <ExpandableForm
        items={listItems}
        id="addVehicleExpandableForm"
        InnerForm={(props) => (
          <AddVehiclesInnerForm
            {...props}
            handleSaveClick={handleSaveClick}
            onClickOfAddButton={onClickOfAddButton}
            onClickOfEditButton={onClickOfEditButton}
            enableNextAndBackButtons={enableNextAndBackButtons}
          />
        )}
      />
    </Layout>
  );
};

import React from "react";
import {
  ExpandableForm,
  SectionHeader
} from "mcp-library-shared-react-components";
import { Layout } from "../../../Layout";
import { useNavigate } from "react-router-dom";
import {
  createPartiesRequest,
  PersonDetails,
  disableAndEnableNextAndBackButtons
} from "../../../../util";
import { AddVehiclesInnerForm } from "./add-vehicles-inner-form.component";
import {
  saveVehicle,
  VehicleDetails,
  VehicleDriverType,
  VehicleOwnerType,
  useAppDispatch,
  useAppSelector
} from "../../../../redux";

export const AddVehicles: React.FC = () => {
  const dispatch = useAppDispatch();
  const { insuredVehicle, vehicleList } = useAppSelector(
    (state) => state.vehicleDetails
  );
  const parties = useAppSelector((state) => state.parties.allParties);

  const navigate = useNavigate();
  sessionStorage.removeItem("vehicleLevel");

  const handleSaveClick = async (
    vehicleDetails: VehicleDetails,
    shouldNavigate: boolean,
    personDetails: PersonDetails
  ) => {
    let vehicleOwnerId = vehicleDetails.vehicleOwnerId;
    let vehicleDriverId = vehicleDetails.vehicleDriverId;
    let notListedDriverId = vehicleDetails.notListedDriverId;
    let notListedOwnerId = vehicleDetails.notListedOwnerId;
    let primaryOwnerType = vehicleDetails.primaryOwnerType;
    let primaryDriverType = vehicleDetails.primaryDriverType;
    let secondaryOwnerType = vehicleDetails.secondaryOwnerType;
    let secondaryDriverType = vehicleDetails.secondaryDriverType;

    const partiesRequest = createPartiesRequest(
      vehicleDetails,
      personDetails,
      parties
    );

    if (partiesRequest.vehicleOwnerId) {
      vehicleOwnerId = partiesRequest.vehicleOwnerId;
    }
    if (partiesRequest.vehicleDriverId) {
      vehicleDriverId = partiesRequest.vehicleDriverId;
    }

    if (
      !notListedDriverId &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.Listed
    ) {
      notListedDriverId = vehicleDriverId;
    }
    if (
      !notListedOwnerId &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Listed
    ) {
      notListedOwnerId = vehicleOwnerId;
    }

    // To display correct party as the selected person, when editing this entry in future flow
    if (
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Company &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.Listed &&
      vehicleDetails.primaryOwnerType !== VehicleOwnerType.SomeoneNotListed
    ) {
      primaryOwnerType = VehicleOwnerType.Listed;
    }

    if (
      vehicleDetails.primaryDriverType !== VehicleDriverType.NoOne &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.Listed &&
      vehicleDetails.primaryDriverType !== VehicleDriverType.SomeoneNotListed
    ) {
      primaryDriverType = VehicleDriverType.Listed;
    }

    if (
      vehicleDetails.secondaryOwnerType !== VehicleOwnerType.Listed &&
      vehicleDetails.secondaryOwnerType !== VehicleOwnerType.SomeoneNotListed
    ) {
      secondaryOwnerType = VehicleOwnerType.Listed;
    }

    if (
      vehicleDetails.secondaryDriverType !== VehicleDriverType.Listed &&
      vehicleDetails.secondaryDriverType !== VehicleDriverType.SomeoneNotListed
    ) {
      secondaryDriverType = VehicleDriverType.Listed;
    }

    const vehicleRequestBody = {
      vehiclesToAdd: [
        {
          ...vehicleDetails,
          vehicleOwnerId,
          vehicleDriverId,
          notListedDriverId,
          notListedOwnerId,
          primaryDriverType,
          primaryOwnerType,
          secondaryOwnerType,
          secondaryDriverType
        }
      ]
    };

    dispatch(
      saveVehicle(
        vehicleRequestBody,
        false,
        null,
        null,
        navigate,
        null,
        {
          partiesToAdd: partiesRequest.partiesToAdd
        },
        shouldNavigate
      )
    );
  };

  const listItems = [insuredVehicle, ...vehicleList];

  const onClickOfAddButton = () => {
    disableAndEnableNextAndBackButtons(true);
  };

  const onClickOfEditButton = () => {
    disableAndEnableNextAndBackButtons(true);
  };

  const enableNextAndBackButtons = () => {
    disableAndEnableNextAndBackButtons(false);
  };

  return (
    <Layout
      nextText="Next"
      backText="Back"
      handleNextClick={() => {
        navigate("../add-damaged-property");
      }}
      handleBackClick={() => navigate(-1)}
    >
      <SectionHeader
        headerText="Add vehicles that were involved in the incident."
        sectionModifier="claim"
      />
      <ExpandableForm
        items={listItems}
        id="addVehicleExpandableForm"
        InnerForm={(props) => (
          <AddVehiclesInnerForm
            {...props}
            handleSaveClick={handleSaveClick}
            onClickOfAddButton={onClickOfAddButton}
            onClickOfEditButton={onClickOfEditButton}
            enableNextAndBackButtons={enableNextAndBackButtons}
          />
        )}
      />
    </Layout>
  );
};
